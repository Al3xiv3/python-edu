# Аннотация типов

'''
Дисклеймер: говорим о python 3.10+. В прошлых надо юзать модуль typing
Аннотация типов (type hinting) - указание типов для удобства понимания кода, но сам
интерпетатор их игнориирует. Зато среда разработки их считывает и дает подсказки
''' 
# Пример
def sum_two_nums(a: int, b: int) -> int:
    return a + b

'''
a: int говорит о том, что a ожидаемо целым. С b аналогично
тире и >
-> int говорит о том, что функция ожидаемо вернет целое число
'''

# Можно  аннотировать и переменные
n: float = 6541.4

# или

n: float
n = 6541.4


# Аннотация несколькими типами
n: float | str = 6541.4 # n - это или float, или str


# Аннотация коллекций
lst: list[int] = [1, 5, 8]  # lst - это list, эл-ты которого int

# Можно чётко указать кол-во эл-тов
lst: list[int, int, int] = [1, 5, 8]  # lst - это list с 3 эл-тами типа int

d: dict[int, str] #ключ - int, значение - str

t: tuple[list[int]] #t = ([1, 2, 3], [1, 2, 3])

p: list[dict[tuple[str | int], bool]] = ... #можно сразу задать,

# Задача: обьявить функцию, который принимает список строк и вернет строку с объедененными по пробелу эл-ты списка

def lst_to_str(a: list[str]) -> str:
    return ' '.join(a) # объеденить по пробелу